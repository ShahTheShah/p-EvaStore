// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id String @id @default(uuid())

    avatar    String
    lastName  String?    @map("last_name")
    firstName String     @map("first_name")
    userName  String     @map("user_name")
    email     String

    roles     UserRole[] @default([BUYER])
    status    UserStatus @default(NOT_CONFIRMED) @map("is_confirmed")

    password  Password?
    tokens    Token[]
    basket    Basket?
    cards     Card[]
    addresses Address[]
    orders    Order[]

    updatedAt DateTime @updatedAt @map("updated_at")
    createdAt DateTime @default(now()) @map("creeated_at")

    @@map("users")
}

enum UserStatus {
    NOT_CONFIRMED
    CONFIRMED
    BLOCKED
}

enum UserRole {
    BUYER
    MANAGER
    ADMIN
}

model Password {
    userId String @id @unique @map("user_id")
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    data String

    updatedAt DateTime @updatedAt @map("updated_at")
    createdAt DateTime @default(now()) @map("creeated_at")

    @@map("passwords")
}

model Token {
    id Int @id @default(autoincrement())

    access  String
    refresh String
    ip      String
    browser String

    userId String @map("user_id")
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    updatedAt DateTime @updatedAt @map("updated_at")
    createdAt DateTime @default(now()) @map("creeated_at")

    @@map("tokens")
}

model Card {
    id Int @id @default(autoincrement())

    number     String
    date       String
    cvsCode    String @map("cvs_code")
    personName String @map("person_name")
    name       String

    userId String @map("user_id")
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    usedInOrders Order[]

    updatedAt DateTime @updatedAt @map("updated_at")
    createdAt DateTime @default(now()) @map("creeated_at")

    @@map("cards")
}

model Address {
    id Int @id @default(autoincrement())

    name        String
    country     String
    state       String
    city        String
    street      String
    houseNumber String  @map("house_number")
    isDefault   Boolean @default(false) @map("is_default")

    userId String @map("user_id")
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    usedInOrders Order[]

    updatedAt DateTime @updatedAt @map("updated_at")
    createdAt DateTime @default(now()) @map("creeated_at")

    @@map("addresses")
}

model Basket {
    userId String @id @unique @map("user_id")
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // products Product[]
    totalCost     Float @map("total_cost")
    totalDiscount Float @map("total_discount")

    updatedAt DateTime @updatedAt @map("updated_at")
    createdAt DateTime @default(now()) @map("creeated_at")

    @@map("baskets")
}

model Order {
    id Int @id @default(autoincrement())

    status        OrderStatus @default(PROCESSING)
    totalCost     Float       @map("total_cost")
    totalDiscount Float       @map("total_discount")

    // products Product[]

    userId String @map("user_id")
    user   User   @relation(fields: [userId], references: [id])

    usedAddressId Int     @map("used_address_id")
    usedAddress   Address @relation(fields: [usedAddressId], references: [id])

    usedCardId Int  @map("used_card_id")
    usedCard   Card @relation(fields: [usedCardId], references: [id])

    updatedAt DateTime @updatedAt @map("updated_at")
    createdAt DateTime @default(now()) @map("creeated_at")

    @@map("orders")
}

enum OrderStatus {
    PROCESSING
    ACCEPTED
    COING_TO
    DELIVERED
    DELIVERY_COMPLETED
    ERROR_PAYMENT
    ERROR_DELIVERY
}

model Product {
    id Int @id @default(autoincrement())

    images      String[]
    title       String
    description String?
    cost        Float
    discount    Float @default(0.0)
    totalCost   Float @map("total_cost")
    estimation  Float

    category Category @relation(fields: [categoryId], references: [id])
    categoryId String @map("category_id")

    updatedAt  DateTime @updatedAt @map("updated_at")
    createdAt  DateTime @default(now()) @map("creeated_at")

    @@map("products")
}

model Category {
    id String @id @default(uuid())

    products   Product[]

    updatedAt DateTime  @updatedAt @map("updated_at")
    createdAt DateTime  @default(now()) @map("creeated_at")

    @@map("categories")
}
